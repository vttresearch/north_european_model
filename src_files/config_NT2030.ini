# config_file section title. Currently must be inputdata
[inputdata]

# General parameters:
# scenarios: List of scenario names (e.g., ['National Trends'])
# scenario_years: Corresponding simulation years (e.g., [2025])
# scenario_alternatives (optional, default=[]): Scenario variants (e.g., ['alt1', 'alt2'], or ['', 'alt1', 'alt2']). 
# output_folder_prefix: Base prefix for output folders (final name: prefix_scenario_year_alternative)
#   * final output folder is <output_folder_prefix>_<scenario>_<s_year>_<alternative> where
#   * (scenario, s_year, alternative) is a loop from tuple (scenarios, scenario_years, scenario_alternatives)
# write_csv_files: IF timeseries are written to CSV files (Default: False).
# force_full_rerun (optional, default=False): Switch triggering full rerun of all pipelines

scenarios = ['National Trends']
scenario_years = [2030]
scenario_alternatives = []
output_folder_prefix = input_tyndp2024
write_csv_files = False
force_full_rerun = False


# Time range:
# start_date: Simulation start (first hour of year, e.g., 2000-01-01 00:00:00)
# end_date: Simulation end (last hour of year, e.g., 2010-12-31 23:00:00)

start_date = 1982-01-01 00:00:00
end_date = 2016-12-31 23:00:00


# Geography:
# country_codes: Countries to include (list of strings), e.g., ['FI00', 'EE00', 'NOM1']
# exclude_grids: Grids to exclude (list of strings), e.g., ['H2']
# exclude_grids: Nodes to exclude (list of strings), e.g., ['EE00_dheat', 'LV00_dheat']
# Note: these are case sensitive

country_codes = [
    'AT00', 'BE00', 'CH00', 'DE00', 'DKW1', 'DKE1', 'EE00', 'ES00',
    'FI00', 'FR00', 'LT00', 'LV00', 'NL00', 'NOS0', 'NOM1',
    'NON1', 'PL00', 'SE01', 'SE02', 'SE03', 'SE04', 'UK00'
    ]
# Not yet included:
# 'ITN1', 'ITCN', 'ITCS', 
# 'PT00'
exclude_grids = ['hydrogen', 'Hydrogencommod']
exclude_nodes = ['AT00_dheat', 'DKW1_dheat', 'EE00_dheat', 'LT00_dheat', 'LV00_dheat', 
                 'NOM1_dheat', 'NON1_dheat', 'NOS0_dheat', 'SE01_dheat']


# Global input data:
# unittypedata_files, fueldata_files, emissiondata_files: Lists of data files applied to each country

unittypedata_files = ['unittypedata_maf2020.xlsx', 'TYNDP-2024_National_Trends.xlsx']
fueldata_files = ['TYNDP-2024_National_Trends.xlsx'] 
emissiondata_files = ['TYNDP-2024_National_Trends.xlsx'] 

# Country-specific input data:
# demand_files: Demand data files (e.g., for electricity, DH, etc.)
# transfer_files: Transfer data files
# unitcapacities_files: Unit capacity data files (multiple file sources)

demanddata_files = ['TYNDP-2024_National_Trends.xlsx',
                    'demanddata_DH_own_projection.xlsx', 
                    'industrialCHP.xlsx',
                    'Finland_dheat_and_industry.xlsx',
                    ]
transferdata_files = ['TYNDP-2024_National_Trends.xlsx',
                      'finland_dheat_and_industry.xlsx'
                      ]
unitdata_files = ['TYNDP-2024_National_Trends.xlsx',
                  'unitdata_chp-units.xlsx', 
                  'industrialCHP.xlsx',
                  'Finland_dheat_and_industry.xlsx',
                  'balticData.xlsx'
                  ]
storagedata_files = ['industrialCHP.xlsx',
                    'storagedata_maf2020.xlsx']

       
# Timeseries specification dictionary
# Mandatory:
#   dictionary item name. Used in messages while processing the data
#       - Other parameters are properties of this dictionary item 
#   processor_name = Name of the class called (required)
#       - The code will import and call file <src/processor_name.py> that must have a class with tha same name
#   bb_parameter = Name of Backbone parameter written to (required)
#   bb_parameter_dimensions = list of dimensions of Backbone parameter, e.g ['grid', 'node', 'f', 't']
# Optional:
#   demand_grid = Name of demand energy carrier, e.g. elec (Default = None)
#   custom_column_value = dictionary {column_title: value} used to fill/replace column content when writing GDX, to e.g. {'flow': 'PV'}. (Default = None)
#   gdx_name_suffix = name of the written gdx file is <bb_parameter>_<gdx_name_suffix>.gdx (Default = '')
#   rounding_precision = Number of decimals in the final outputs (Default = 0)
#   calculate_average_year = Calculate values for an average year (Default = False)
#   process_only_single_year = Process values only for a single year, e.g. in case of lacking data (Default = False)
#   secondary_output_name = A name for secondary DataFrame returned by processor class, e.g. mingen_nodes_hydro used when building input excel (Default = None)
#   quantile_map = A map used when creating forecast data (Default = {0.5: 'f01', 0.1: 'f02', 0.9: 'f03'})
#   input_file : Name of the input file in input_folder (Default = '')
#   attached_grid : suffix to append to country codes in output columns (Default = '')

timeseries_specs = {
    'District heating demand': {
        'processor_name': 'DH_demand_fromTemperature',
        'bb_parameter': 'ts_influx',
        'bb_parameter_dimensions': ['grid', 'node', 'f', 't'],
        'demand_grid': 'dheat',
        'gdx_name_suffix': 'dheat',
        'calculate_average_year': True, 
        },
    'electricity demand': {
        'processor_name': 'elec_demand_TYNDP2024',
        'bb_parameter': 'ts_influx',
        'bb_parameter_dimensions': ['grid', 'node', 'f', 't'],
        'demand_grid': 'elec',
        'gdx_name_suffix': 'elec',
        'calculate_average_year': True, 
        },
    'hydro inflow': {
        'processor_name': 'hydro_inflow_MAF2019',
        'bb_parameter': 'ts_influx',
        'bb_parameter_dimensions': ['grid', 'node', 'f', 't'],
        'gdx_name_suffix': 'hydro',
        'calculate_average_year': True,
        },
    'hydro_storage_limits': {
        'processor_name': 'hydro_storage_limits_MAF2019',
        'bb_parameter': 'ts_node',
        'bb_parameter_dimensions': ['grid', 'node', 'param_gnBoundaryTypes','f', 't'],
        'gdx_name_suffix': 'hydro_storage_limits',
        'process_only_single_year': True,   # same values for every year in the data source
        'secondary_output_name': 'ts_storage_limits_hydro'
        },
    'hydro_generation_limits': {
        'processor_name': 'hydro_mingen_limits_MAF2019',
        'bb_parameter': 'ts_groupPolicy',
        'bb_parameter_dimensions': ['group', 'param_policy', 't'],
        'gdx_name_suffix': 'mingen',
        'secondary_output_name': 'mingen_nodes_hydro'
        },
    'PV': {
        'processor_name': 'VRE_PECD',
        'bb_parameter': 'ts_cf',
        'bb_parameter_dimensions': ['flow', 'node', 'f', 't'],
        'custom_column_value': {'flow': 'PV'},
        'gdx_name_suffix': 'PV',
        'calculate_average_year': True,
        'rounding_precision': 5,
        'input_file': 'PECD-PV/',   # folder, not file
        'attached_grid': 'elec'
        },
    'wind_onshore': {
        'processor_name': 'VRE_PECD',
        'bb_parameter': 'ts_cf',
        'bb_parameter_dimensions': ['flow', 'node', 'f', 't'],
        'custom_column_value': {'flow': 'onshore'},
        'gdx_name_suffix': 'wind_onshore',
        'calculate_average_year': True,
        'rounding_precision': 5,
        'input_file': 'PECD-onshore/',   # folder, not file
        'attached_grid': 'elec'
        },
    'wind_offshore': {
        'processor_name': 'VRE_PECD',
        'bb_parameter': 'ts_cf',
        'bb_parameter_dimensions': ['flow', 'node', 'f', 't'],
        'custom_column_value': {'flow': 'offshore'},
        'gdx_name_suffix': 'wind_offshore',
        'calculate_average_year': True,
        'rounding_precision': 5,
        'input_file': 'PECD-offshore/',   # folder, not file
        'attached_grid': 'elec'
        },    
    }

